#!/usr/bin/env ruby
# vim: ts=2:tw=2:sw=2:expandtab
# vi: ts=2:tw=2:sw=2:expandtab

require 'yaml'
require './lib/db'
require './lib/crawler'

$SLSLogger = Logger.new('sls_import.log')
$SLSLogger.level = Logger::INFO

class Hash
  def symbolize_keys
    self.inject({}){|item,(k,v)| item[k.to_sym] = (v.is_a?(Hash) ? v.symbolize_keys : v); item}
  end
end
begin
sls = YAML::load(File.open('springloops.yml')).symbolize_keys
db = YAML::load(File.open('database.yml')).symbolize_keys
sls[:cleanup_db] = true unless not sls[:cleanup_db] and File.exists?(db[:database])

#puts sls[:cleanup_db]
#exit

$bot = SLS::Crawler.new(
  :username => sls[:username],
  :password => sls[:password],
  :organization => sls[:organization]
)

$SLSLogger.info "Setting up database"
if sls[:cleanup_db]
  SLS::cleanup_db
else
  SLS::import_table_schema
end
$SLSLogger.info "Database is setup correctly"
$SLSLogger.info "Beginning import by project"
sls[:projects].each do |project_data|
  # Make sure all listed projects exist beforehand
  proj = SLS::Project.where(
    :sls_id => project_data["id"],
    :name => project_data["name"]
  ).first_or_create
  if sls[:cleanup_db]
    $SLSLogger.info "Importing tickets for #{proj.name} from CSV"
    SLS::import_ticket_nums proj, project_data["csv"]
    $SLSLogger.info "done"
  end
  $SLSLogger.info "Importing #{proj.name} tickets from Springloops"
  SLS::ajax_import_ticket_info :tickets => proj.tickets.where(:title => nil).order(sls_id: :asc)
  $SLSLogger.info "done"
end
$SLSLogger.info "Done importing projects"
rescue => e
  $SLSLogger.fatal e
end
